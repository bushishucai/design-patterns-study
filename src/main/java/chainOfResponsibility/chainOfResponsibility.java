/*
 *
 责任链模式（Chain of Responsibility Pattern）是一种行为型设计模式，它允许您将请求沿着处理者链进行传递，直到有一个处理者能够处理请求为止。每个处理者都可以决定是否处理请求或将其传递给下一个处理者。

 这个模式的核心思想是将请求的发送者与接收者解耦，从而使多个对象都有机会处理请求，而不必显式指定接收者。责任链模式常常用于以下情况：

 有多个对象可以处理请求，但不确定哪个对象最终会处理它。
 需要动态指定处理请求的对象集合。
 需要在不同对象之间进行松耦合，以便灵活地添加或删除处理者。
 责任链模式的主要参与者包括：

 抽象处理者（Handler）：定义了一个处理请求的接口，通常包括一个处理请求的方法。它还可以包含一个指向下一个处理者的引用。
 具体处理者（Concrete Handler）：实现了处理请求的具体逻辑，并在需要时将请求传递给下一个处理者。如果无法处理请求，则终止请求链。
 以下是责任链模式的一些关键要点：

 请求从链的顶部（或任何起始点）开始，并沿着链逐级传递，直到一个处理者能够处理它。
 可以通过在具体处理者中设置条件来决定是否处理请求，也可以在抽象处理者中动态地指定下一个处理者。
 这种模式可以减少请求发送者和接收者之间的耦合，增加了灵活性和可维护性。
 注意要确保责任链不会形成无限循环，通常需要在链中设置终止条件。
 责任链模式在实际应用中常见于日志记录、权限验证、异常处理等场景，其中多个处理者按照一定的顺序处理请求，直到其中一个处理者满足条件并执行操作。这有助于将复杂的处理逻辑分解成多个独立的处理步骤，提高了代码的可扩展性和可维护性。
 */